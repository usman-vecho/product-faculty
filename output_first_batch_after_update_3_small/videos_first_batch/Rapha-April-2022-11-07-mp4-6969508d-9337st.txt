Improving Product Quality: A Conversation between Tech Professionals

In a recent conversation, two tech professionals discussed the challenges they face in ensuring product quality. The conversation touched upon two main topics: quality assurance (QA) and objectives and key results (OKRs). This blog will delve into the key insights from their discussion and explore strategies to address these challenges. 

Firstly, the conversation emphasized the need for a more robust QA process. Speaker 2 expressed frustration about the lack of a dedicated QA practice in their company, which leads to the product team getting lost in the weeds. They highlighted the burden the absence of a firm QA structure places on product managers (PMs), who end up shouldering the responsibility for QA. Additionally, the lack of automation for testing tasks adds to the workload.

To address this issue, Speaker 1 shared insights from their experience at Google and its subsidiary, Ways. They mentioned that, at Google, there is no dedicated QA team. Instead, developers are empowered and made accountable for the bugs in their own code. Speaker 1 emphasized the importance of making unit testing and code reviews part of the release process. Unit testing involves developers writing code to test their own work, ensuring that inputs produce the expected outputs. Code reviews further ensure the quality of the code before it is committed.

The concept of critical user journeys was also introduced as a framework to prioritize testing efforts. These journeys represent key user flows that should not break, no matter what changes are made to the product. Speaker 1 recommended conducting regular integration testing on critical user journeys and leveraging QA for testing regression and edge cases. 

The conversation then shifted to OKRs, specifically the lack of clarity in defining and measuring them. Speaker 2 expressed confusion about how numbers for OKRs are determined. They questioned whether these numbers were mere guesses or based on concrete data. Speaker 2 also highlighted the lack of follow-up on whether the team actually hits their OKR targets.

Speaker 1 responded by explaining how OKRs are typically set. They mentioned the formula of setting a target increase by a specific percentage within a defined timeline. However, Speaker 1 acknowledged that setting OKR numbers can sometimes feel arbitrary. Nonetheless, they emphasized the importance of regularly tracking and assessing progress towards these goals. To measure product quality beyond the presence of bugs, Speaker 1 introduced the HEART framework, which stands for happiness, engagement, adoption, retention, and task success. This framework provides a holistic view of product quality by evaluating user satisfaction, engagement, and task completion.

The conversation concluded with a reflection on QA leadership. Speaker 2 expressed the need to clarify who is responsible for leading QA efforts within the organization. Speaker 1 suggested that once development processes are in place, the responsibility for QA should be distributed among the team members. However, they also acknowledged that having someone in a program manager role to oversee release cycles and regression testing can be beneficial.

Ultimately, this conversation highlights the importance of establishing a culture of quality across the entire organization. It is crucial for developers to take ownership of their code and prioritize unit testing and code reviews. QA should be seen as a collaborative effort rather than the sole responsibility of a specific team. By implementing these strategies, organizations can improve their QA process and ensure the delivery of high-quality products. Additionally, setting clear and measurable OKRs, coupled with regular progress tracking, can foster a culture of accountability and drive continuous improvement.

In conclusion, this conversation provides valuable insights into the challenges faced by tech professionals in ensuring product quality. The discussions surrounding QA practices and OKR implementation shed light on potential solutions. By implementing these strategies and fostering a culture of quality across the organization, tech teams can enhance their product development processes and deliver exceptional user experiences.